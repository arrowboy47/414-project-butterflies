library(tidyverse)
library(lme4)
library(performance)
df <- suppressMessages(read_csv('allgr_array_KianaRawdat.csv'))
head(df)
df <- df |>
mutate(
# Parse the month and day components
month = as.integer(substr(month.day, 1, 2)),
day = as.integer(substr(month.day, 4, 5)),
# Assign year based on month
year = ifelse(month >= 10, 2022, 2023),
# Create a Date column
Date = as.Date(paste(year, month, day, sep = "-"), format = "%Y-%m-%d"),
# Calculate seasonDay and seasonWeight
seasonDay = as.numeric(difftime(Date, as.Date("2022-12-01"), units = "days"))
)
colSums(is.na(df)) # lots of cols with missing vals so log like wont worksince lmer will drop nas
df$array <- as.factor(df$array)
df$array <- relevel(df$array, ref = "NE")
# Update 'butterfly_present' column in R
df$butterfly_present <- ifelse(df$array == "Cluster", 1, 0)
head(df)
library(tidyverse)
library(lme4)
library(performance)
df <- suppressMessages(read_csv('allgr_array_KianaRawdat.csv'))
head(df)
df <- df |>
mutate(
# Parse the month and day components
month = as.integer(substr(month.day, 1, 2)),
day = as.integer(substr(month.day, 4, 5)),
# Assign year based on month
year = ifelse(month >= 10, 2022, 2023),
# Create a Date column
Date = as.Date(paste(year, month, day, sep = "-"), format = "%Y-%m-%d"),
# Calculate seasonDay and seasonWeight
seasonDay = as.numeric(difftime(Date, as.Date("2022-12-01"), units = "days"))
)
colSums(is.na(df)) # lots of cols with missing vals so log like wont worksince lmer will drop nas
df$array <- as.factor(df$array)
df$array <- relevel(df$array, ref = "NE")
# Update 'butterfly_present' column in R
df$butterfly_present <- ifelse(df$array == "Cluster", 1, 0)
head(df)
model1 <- lmer(temp.avg ~ seasonDay + (1 + seasonDay | grove),data=df)
model2 <- lmer(temp.avg ~ seasonDay + butterfly_present + (1 + seasonDay | grove),data=df)
anova(model1, model2)
# Center only the response variables (not the predictors)
df$temp.min_centered <- df$temp.min - mean(df$temp.min, na.rm = TRUE)
df$temp.max_centered <- df$temp.max - mean(df$temp.max, na.rm = TRUE)
df$hum.avg_centered <- df$hum.avg - mean(df$hum.avg, na.rm = TRUE)
df$light.avg_centered <- df$light.avg - mean(df$light.avg, na.rm = TRUE)
df$light.std_centered <- df$light.std - mean(df$light.std, na.rm = TRUE)
df$dew.avg_centered <- df$dew.pt.avg - mean(df$dew.pt.avg, na.rm = TRUE)
# Re-run the models with the centered response variables
temp.min.model1 <- lmer(temp.min_centered ~ seasonDay + (1 + seasonDay | grove), data = df)
temp.min.model2 <- lmer(temp.min_centered ~ seasonDay + butterfly_present + (1 + seasonDay | grove), data = df)
anova(temp.min.model1, temp.min.model2)
temp.max.model1 <- lmer(temp.max_centered ~ seasonDay + (1 + seasonDay | grove), data = df)
temp.max.model2 <- lmer(temp.max_centered ~ seasonDay + butterfly_present + (1 + seasonDay | grove), data = df)
anova(temp.max.model1, temp.max.model2)
hum.avg.model1 <- lmer(hum.avg_centered ~ seasonDay + (1 + seasonDay | grove), data = df)
hum.avg.model2 <- lmer(hum.avg_centered ~ seasonDay + butterfly_present + (1 + seasonDay | grove), data = df)
anova(hum.avg.model1, hum.avg.model2)
light.avg.model1 <- lmer(light.avg_centered ~ seasonDay + (1 + seasonDay | grove), data = df)
light.avg.model2 <- lmer(light.avg_centered ~ seasonDay + butterfly_present + (1 + seasonDay | grove), data = df)
anova(light.avg.model1, light.avg.model2)
light.std.model1 <- lmer(light.std_centered  ~ seasonDay + (1 + seasonDay | grove), data = df)
light.std.model2 <- lmer(light.std_centered ~ seasonDay + butterfly_present + (1 + seasonDay | grove), data = df)
anova(light.std.model1, light.std.model2)
dewpt.model1<- lmer(dew.avg_centered ~ seasonDay + (1 + seasonDay | grove), data = df)
dewpt.model2 <- lmer(dew.avg_centered ~ seasonDay + butterfly_present + (1 + seasonDay | grove), data = df)
anova(dewpt.model1, dewpt.model2)
# Density plot for light.avg by butterfly presence
ggplot(df, aes(x = light.avg, fill = factor(butterfly_present))) +
geom_density(alpha = 0.5) +
labs(x = "Average Light", y = "Density", fill = "Butterfly Present") +
theme_minimal()
# Temperature minimum
ggplot(df, aes(x=factor(butterfly_present), y=temp.min)) +
geom_boxplot(fill=c("#66c2a5", "#fc8d62")) +
labs(x="Butterfly Present", y="Minimum Temperature (°C)",
title="Minimum Temperature by Butterfly Presence") +
scale_x_discrete(labels=c("No", "Yes")) +
theme_minimal()
# Temperature maximum
ggplot(df, aes(x=factor(butterfly_present), y=temp.max)) +
geom_boxplot(fill=c("#66c2a5", "#fc8d62")) +
labs(x="Butterfly Present", y="Maximum Temperature (°C)",
title="Maximum Temperature by Butterfly Presence") +
scale_x_discrete(labels=c("No", "Yes")) +
theme_minimal()
# Temperature average
ggplot(df, aes(x=factor(butterfly_present), y=temp.avg)) +
geom_boxplot(fill=c("#66c2a5", "#fc8d62")) +
labs(x="Butterfly Present", y="Average Temperature (°C)",
title="Average Temperature by Butterfly Presence") +
scale_x_discrete(labels=c("No", "Yes")) +
theme_minimal()
# Humidity average
ggplot(df, aes(x=factor(butterfly_present), y=hum.avg)) +
geom_boxplot(fill=c("#66c2a5", "#fc8d62")) +
labs(x="Butterfly Present", y="Average Humidity (%)",
title="Average Humidity by Butterfly Presence") +
scale_x_discrete(labels=c("No", "Yes")) +
theme_minimal()
# Light average
ggplot(df, aes(x=factor(butterfly_present), y=light.avg)) +
geom_boxplot(fill=c("#66c2a5", "#fc8d62")) +
labs(x="Butterfly Present", y="Average Light",
title="Average Light by Butterfly Presence") +
scale_x_discrete(labels=c("No", "Yes")) +
theme_minimal()
# Light standard deviation
ggplot(df, aes(x=factor(butterfly_present), y=light.std)) +
geom_boxplot(fill=c("#66c2a5", "#fc8d62")) +
labs(x="Butterfly Present", y="Light Standard Deviation",
title="Light Variability by Butterfly Presence") +
scale_x_discrete(labels=c("No", "Yes")) +
theme_minimal()
# Install and load the performance package if not already installed
#install.packages("performance")
library(performance)
# Light average models
check_model(light.avg.model1)
check_model(light.avg.model2)
# Light standard deviation models
check_model(light.std.model1)
check_model(light.std.model2)
# Log transformation for light.avg and light.std
df$log_light_avg <- log(df$light.avg + 1)  # Add 1 to avoid log(0) if necessary
df$log_light_std <- log(df$light.std + 1)  # Add 1 to avoid log(0) if necessary
# Refit models with the transformed variables
light.avg.model1_log <- lmer(log_light_avg ~ seasonDay + (1 + seasonDay | grove), data = df)
light.avg.model2_log <- lmer(log_light_avg ~ seasonDay + butterfly_present + (1 + seasonDay | grove), data = df)
light.std.model1_log <- lmer(log_light_std ~ seasonDay + (1 + seasonDay | grove), data = df)
light.std.model2_log <- lmer(log_light_std ~ seasonDay + butterfly_present + (1 + seasonDay | grove), data = df)
# Graph for light.avg_centered
ggplot(df, aes(x = seasonDay, y = light.avg_centered)) +
geom_line() +
labs(x = "Season Day", y = "Centered Light Average", color = "Grove") +
ggtitle("Light Average Across Time in Different Groves") +
theme_minimal()
# Graph for light.std_centered
ggplot(df, aes(x = seasonDay, y = light.std_centered, color = factor(grove))) +
geom_line() +
labs(x = "Season Day", y = "Centered Light Std", color = "Grove") +
ggtitle("Light Std Across Time in Different Groves") +
theme_minimal()
# Null model with butterfly_present for light.avg_centered
null.model.light.avg <- lmer(light.avg_centered ~ butterfly_present + (1 + seasonDay | grove), data = df)
# Null model with butterfly_present for light.std_centered
null.model.light.std <- lmer(light.std_centered ~ butterfly_present + (1 + seasonDay | grove), data = df)
# Model summary for light.avg
summary(null.model.light.avg)
# Model summary for light.std
summary(null.model.light.std)
# ICC for light.avg
icc_light_avg <-  1.125e+07/( 1.125e+07+5.476e+07)
# ICC for light.std
icc_light_std <-  61239388/(61239388 + 240056454)
icc_light_avg
icc_light_std
# Likelihood, deviance, and AIC for light.avg
logLik(null.model.light.avg)
deviance(null.model.light.avg)
AIC(null.model.light.avg)
# Likelihood, deviance, and AIC for light.std
logLik(null.model.light.std)
deviance(null.model.light.std)
AIC(null.model.light.std)
# Model with random slopes for seasonDay for light.avg_centered
random_slope_model.light.avg <- lmer(light.avg_centered ~ seasonDay + butterfly_present + (1 + seasonDay | grove), data = df)
# Model with random slopes for seasonDay for light.std_centered
random_slope_model.light.std <- lmer(light.std_centered ~ seasonDay + butterfly_present + (1 + seasonDay | grove), data = df)
# Likelihood ratio test comparing level-2 and random slope models for light.avg
anova(level2.model.light.avg, random_slope_model.light.avg)
library(ggeffects)
# Generate the prediction plot without confidence intervals
plot_gg <- ggpredict(random_slope_model9, terms = c("butterfly_present", "grove"), type="re", show_ci = FALSE)
pp <- df|>
select(grove)
unique(pp)
df2 <- df %>%
mutate(north = ifelse(grove %in% c("OC", "P", "BL", "SC", "MB"), 1, 0))
df2|>
filter(north == "HB")
random_slope_model9 <- lmer(light.avg_centered ~ seasonDay + butterfly_present * coastal + (1 + butterfly_present | grove), data = your_data)
p <- df |>
ggplot(aes(x = seasonDay, y = temp.max_centered)) +
geom_line() +
facet_wrap(~ array)
p
p <- df |>
ggplot(aes(x = seasonDay, y = light.avg_centered, color = array)) +
geom_line() +
facet_wrap(~ grove) +
labs(
x = "Days Since Dec 1, 2018",
y = "Centered Average Light",
color = "Array"
) +
theme_minimal() +
theme(strip.text = element_text(size = 12, face = "bold"))
p
p <- df |>
ggplot(aes(x = seasonDay, y = light.avg_centered, color = array)) +
geom_line() +
facet_wrap(~ grove) +
labs(
x = "Days Since Dec 1, 2018",
y = "Centered Average Light",
color = "Array"
) +
theme_minimal() +
theme(strip.text = element_text(size = 12, face = "bold"))
p
# Fit a random slope model for seasonDay
random_slope_model <- lmer(light.avg_centered ~ seasonDay + butterfly_present + (1 + seasonDay | grove), data = df)
# Summary of the model
summary(random_slope_model)
# Extract the random slopes and intercepts
ranef_data <- ranef(random_slope_model)$grove
# Plot the random slopes for seasonDay
ggplot(ranef_data, aes(x = `(Intercept)`, y = seasonDay)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, col = "red") +
xlab("Random Intercept (Grove)") +
ylab("Random Slope for SeasonDay") +
theme_minimal() +
ggtitle("Random Slopes for SeasonDay by Grove")
# Cross-level interaction model
cross_level_model <- lmer(light.avg_centered ~ seasonDay * butterfly_present + (1 + seasonDay | grove), data = df)
# Summary of the model
summary(cross_level_model)
# Fit a random slope model for seasonDay
random_slope_model <- lmer(light.avg_centered ~ seasonDay + butterfly_present + (1 + seasonDay | grove), data = df)
# Summary of the model
summary(random_slope_model)
# Extract the random slopes and intercepts
ranef_data <- ranef(random_slope_model)$grove
# Plot the random slopes for seasonDay
ggplot(ranef_data, aes(x = `(Intercept)`, y = seasonDay)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, col = "red") +
xlab("Random Intercept (Grove)") +
ylab("Random Slope for SeasonDay") +
theme_minimal() +
ggtitle("Random Slopes for SeasonDay by Grove")
p <- df |>
ggplot(aes(x = seasonDay, y = light.avg_centered, color = array)) +
geom_line() +
facet_wrap(~ grove) +
labs(
x = "Days Since Dec 1, 2018",
y = "Centered Average Light",
color = "Array"
) +
theme_minimal() +
theme(strip.text = element_text(size = 12, face = "bold"))
p
pp <- df|>
select(grove)
unique(pp)
df2 <- df %>%
mutate(north = ifelse(grove %in% c("OC", "P", "BL", "SC", "MB"), 1, 0))
df2|>
filter(north == "HB")
random_slope_model9 <- lmer(light.avg_centered ~ seasonDay + butterfly_present * coastal + (1 + butterfly_present | grove), data = your_data)
library(ggeffects)
# Generate the prediction plot without confidence intervals
plot_gg <- ggpredict(random_slope_model9, terms = c("butterfly_present", "grove"), type="re", show_ci = FALSE)
library(ggeffects)
library(ggplot2)
# Generate the prediction plot
plot(ggpredict(random_slope_model9, terms = c("butterfly_present", "grove"), type="re", ci_level = NA))
library(effects)
random_slope_model9 <- lmer(light.avg_centered ~ seasonDay + butterfly_present * north +
(1 + seasonDay + butterfly_present | grove),
data = df2)
plot(effects::allEffects(random_slope_model9))
plot(ggpredict(random_slope_model9, terms = c("butterfly_present", "grove", "north"), type="re", ci_level = NA))
# First, get the predictions
predictions <- ggpredict(random_slope_model9,
terms = c("butterfly_present", "grove", "north"),
type = "re")
# Create the plot
ggplot(predictions, aes(x = x, y = predicted,
color = group,
linetype = factor(facet))) +
geom_line() +
scale_linetype_manual(values = c("solid", "dashed"),
name = "North",
labels = c("South (0)", "North (1)")) +
scale_color_brewer(palette = "Set2") +
labs(x = "Butterfly Present",
y = "Light Average (centered)",
color = "Grove") +
theme_bw() +
theme(panel.grid.minor = element_blank())
# Get the predictions
predictions <- ggpredict(random_slope_model9,
terms = c("butterfly_present", "grove"),
type = "re")
# Add the north information from your original dataset
# You'll need to merge this information from df2
predictions$north <- df2$north[match(predictions$group, df2$grove)]
# Create the plot
ggplot(predictions, aes(x = x, y = predicted,
color = group,
linetype = factor(north))) +
geom_line() +
scale_linetype_manual(values = c("solid", "dashed"),
name = "North",
labels = c("South (0)", "North (1)")) +
scale_color_brewer(palette = "Set2") +
labs(x = "Butterfly Present",
y = "Light Average (centered)",
color = "Grove") +
theme_bw()
# Get predictions - now only looking at butterfly_present and north interaction
predictions <- ggpredict(random_slope_model9,
terms = c("butterfly_present", "north"),
type = "re")
# Create simplified plot
ggplot(predictions, aes(x = x, y = predicted,
color = factor(group))) +
geom_line(size = 1) +
scale_color_manual(values = c("darkblue", "darkred"),
name = "Location",
labels = c("South (0)", "North (1)")) +
labs(x = "Butterfly Present",
y = "Light Average (centered)") +
theme_bw()
library(effects)
random_slope_model9 <- lmer(light.std ~ seasonDay + butterfly_present * north +
(1 + seasonDay + butterfly_present | grove),
data = df2)
plot(effects::allEffects(random_slope_model9))
plot(ggpredict(random_slope_model9, terms = c("butterfly_present", "grove", "north"), type="re", ci_level = NA))
# Get predictions - now only looking at butterfly_present and north interaction
predictions <- ggpredict(random_slope_model9,
terms = c("butterfly_present", "north"),
type = "re")
# Create simplified plot
ggplot(predictions, aes(x = x, y = predicted,
color = factor(group))) +
geom_line(size = 1) +
scale_color_manual(values = c("darkblue", "darkred"),
name = "Location",
labels = c("South (0)", "North (1)")) +
labs(x = "Butterfly Present",
y = "Light Average (centered)") +
theme_bw()
library(effects)
random_slope_model9 <- lmer(light.std ~ seasonDay + butterfly_present * north +
(1 + seasonDay + butterfly_present | grove),
data = df2)
plot(effects::allEffects(random_slope_model9))
plot(ggpredict(random_slope_model9, terms = c("butterfly_present", "grove", "north"), type="re", ci_level = NA))
summary(random_slope_model9)
# Get predictions - now only looking at butterfly_present and north interaction
predictions <- ggpredict(random_slope_model9,
terms = c("butterfly_present", "north"),
type = "re")
# Create simplified plot
ggplot(predictions, aes(x = x, y = predicted,
color = factor(group))) +
geom_line(size = 1) +
scale_color_manual(
name = "Location",
labels = c("South (0)", "North (1)")) +
labs(x = "Butterfly Present",
y = "Light Average (centered)") +
theme_bw()
# Get predictions - now only looking at butterfly_present and north interaction
predictions <- ggpredict(random_slope_model9,
terms = c("butterfly_present", "north"),
type = "re")
# Create simplified plot
ggplot(predictions, aes(x = x, y = predicted,
color = factor(group))) +
geom_line(size = 1) +
scale_color_manual(values = c("blue", "red"),
name = "Location",
labels = c("South (0)", "North (1)")) +
labs(x = "Butterfly Present",
y = "Light Average (centered)") +
theme_bw()
# Get grove-level predictions
predictions <- ggpredict(random_slope_model9,
terms = c("butterfly_present", "grove"),
type = "re")
# Add the north information
predictions$north <- df2$north[match(predictions$group, df2$grove)]
# Create plot
ggplot(predictions, aes(x = x, y = predicted,
color = factor(north),
group = group)) +  # group by grove to get individual lines
geom_line() +
scale_color_manual(values = c("darkblue", "darkred"),
name = "Location",
labels = c("South (0)", "North (1)")) +
labs(x = "Butterfly Present",
y = "Light Average (centered)") +
theme_bw()
# Get grove-level predictions
predictions <- ggpredict(random_slope_model9,
terms = c("butterfly_present", "grove"),
type = "re")
# Add the north information
predictions$north <- df2$north[match(predictions$group, df2$grove)]
# Create plot
ggplot(predictions, aes(x = x, y = predicted,
color = factor(north),
group = group)) +  # group by grove to get individual lines
geom_line() +
scale_color_manual(values = c("blue", "red"),
name = "Location",
labels = c("South (0)", "North (1)")) +
labs(x = "Butterfly Present",
y = "Light Average (centered)") +
theme_bw()
# Get grove-level predictions
predictions <- ggpredict(random_slope_model9,
terms = c("butterfly_present", "grove"),
type = "re")
# Add the north information
predictions$north <- df2$north[match(predictions$group, df2$grove)]
# Create plot
ggplot(predictions, aes(x = x, y = predicted,
color = factor(north),
group = group)) +  # group by grove to get individual lines
geom_line() +
scale_color_manual(values = c("blue", "red"),
name = "Location",
labels = c("South (0)", "North (1)")) +
labs(x = "Butterfly Present",
y = "Light Variability (stdev)") +
theme_bw()
# Create plot
ggplot(predictions, aes(x = x, y = predicted,
color = factor(north),
group = group)) +  # group by grove to get individual lines
geom_line() +
scale_color_manual(values = c("blue", "red"),
name = "Location",
labels = c("South (0)", "North (1)")) +
labs(x = "Butterfly Present",
y = "Light Variability (stdev)") +
theme_bw()
